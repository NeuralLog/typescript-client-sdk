import axios, { AxiosInstance } from 'axios';
import { LogsService } from '../logs/LogsService';
import { AuthService } from '../auth/AuthService';
import { CryptoService } from '../crypto/CryptoService';
import { KekService } from '../auth/KekService';
import { TokenService } from '../auth/TokenService';
import { LogError } from '../errors';
import {
  KeyHierarchyManager,
  LogManager,
  UserManager,
  AuthManager
} from '../managers';

/**
 * Tenant endpoints returned by the registry
 */
export interface TenantEndpoints {
  tenantId: string;
  authUrl: string;
  serverUrl: string;
  webUrl: string;
  apiVersion: string;
}

/**
 * NeuralLog client configuration
 */
export interface NeuralLogClientConfig {
  /**
   * Tenant ID
   */
  tenantId: string;

  /**
   * Registry URL (optional - will be constructed from tenantId if not provided)
   */
  registryUrl?: string;

  /**
   * API URL (optional - will be fetched from registry if not provided)
   */
  apiUrl?: string;

  /**
   * Auth service URL (optional - will be fetched from registry if not provided)
   */
  authUrl?: string;

  /**
   * Logs service URL (optional - will be fetched from registry if not provided)
   */
  logsUrl?: string;
  
  /**
   * API key (optional - for authentication)
   */
  apiKey?: string;
}

/**
 * NeuralLog client
 *
 * This is the main entry point for interacting with the NeuralLog system.
 * It provides methods for logging, searching, and retrieving logs with
 * zero-knowledge encryption.
 */
export class NeuralLogClient {
  private tenantId: string;
  private registryUrl?: string;
  private webUrl?: string;
  private apiClient: AxiosInstance;
  
  // Services
  private authService: AuthService;
  private logsService: LogsService;
  private cryptoService: CryptoService;
  private kekService: KekService;
  private tokenService: TokenService;
  
  // Managers
  private keyHierarchyManager: KeyHierarchyManager;
  private logManager: LogManager;
  private userManager: UserManager;
  private authManager: AuthManager;
  
  private endpointsInitialized: boolean = false;
  
  /**
   * Create a new NeuralLogClient
   *
   * @param config Client configuration
   */
  constructor(config: NeuralLogClientConfig) {
    if (!config.tenantId) {
      throw new Error('Tenant ID is required');
    }

    this.tenantId = config.tenantId;
    this.registryUrl = config.registryUrl;

    // Create API client
    this.apiClient = axios.create({
      baseURL: config.apiUrl || 'http://localhost:3000',
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json'
      }
    });

    // Create services with default URLs that will be updated during initialization
    const authUrl = config.authUrl || 'http://localhost:3000';
    const logsUrl = config.logsUrl || 'http://localhost:3030';

    this.authService = new AuthService(
      authUrl,
      this.apiClient
    );

    this.logsService = new LogsService(
      logsUrl,
      this.apiClient
    );

    this.kekService = new KekService(
      authUrl,
      this.apiClient
    );

    this.tokenService = new TokenService(
      authUrl,
      this.apiClient
    );

    // Create crypto service
    this.cryptoService = new CryptoService();
    
    // Create managers
    this.keyHierarchyManager = new KeyHierarchyManager(this.cryptoService, this.kekService);
    this.logManager = new LogManager(this.cryptoService, this.logsService, this.authService, this.tenantId);
    this.userManager = new UserManager(this.cryptoService, this.authService);
    this.authManager = new AuthManager(this.cryptoService, this.authService, this.tokenService, this.tenantId);
    
    // Initialize with API key if provided
    if (config.apiKey) {
      this.authenticateWithApiKey(config.apiKey).catch(error => {
        console.error('Failed to authenticate with API key:', error);
      });
    }
  }
  
  /**
   * Initialize the client by fetching endpoints from the registry if needed
   */
  public async initialize(): Promise<void> {
    if (this.endpointsInitialized) {
      return;
    }

    // If all URLs are already provided and registryUrl is not set, skip registry lookup
    if (!this.registryUrl && this.authService.getBaseUrl() && this.logsService.getBaseUrl()) {
      console.debug('Using provided endpoints');
      this.endpointsInitialized = true;
      return;
    }

    try {
      // If no registry URL is provided, construct a default one
      if (!this.registryUrl) {
        this.registryUrl = `https://registry.${this.tenantId}.neurallog.app`;
        console.debug(`Using default registry URL: ${this.registryUrl}`);
      }

      // Fetch tenant endpoints from registry
      console.debug(`Fetching endpoints from registry: ${this.registryUrl}`);
      const response = await axios.get<TenantEndpoints>(`${this.registryUrl}/endpoints`);

      if (response.status !== 200) {
        throw new Error(`Failed to fetch tenant endpoints: ${response.statusText}`);
      }

      const endpoints = response.data;

      // Update services with endpoints
      this.authService.setBaseUrl(endpoints.authUrl);
      this.logsService.setBaseUrl(endpoints.serverUrl);
      this.kekService.setBaseUrl(endpoints.authUrl);
      this.tokenService.setBaseUrl(endpoints.authUrl);
      this.webUrl = endpoints.webUrl;

      console.debug('Endpoints initialized', {
        authUrl: endpoints.authUrl,
        serverUrl: endpoints.serverUrl,
        webUrl: endpoints.webUrl,
        apiVersion: endpoints.apiVersion
      });

      this.endpointsInitialized = true;
    } catch (error) {
      console.error('Failed to initialize client', error);
      throw new LogError(
        `Failed to initialize client: ${error instanceof Error ? error.message : String(error)}`,
        'initialization_failed'
      );
    }
  }
  
  /**
   * Authenticate with username and password
   *
   * @param username Username
   * @param password Password
   * @returns Promise that resolves to true if authentication was successful
   */
  public async authenticateWithPassword(username: string, password: string): Promise<boolean> {
    try {
      // Ensure endpoints are initialized
      await this.initialize();
      
      // Authenticate with the auth service
      const authResult = await this.authService.login(username, password);
      
      if (authResult.success) {
        // Authenticate with token
        const authenticated = await this.authManager.authenticateWithToken(authResult.token);
        
        if (authenticated) {
          // Extract user ID from token
          const userId = this.tokenService.getUserIdFromToken(authResult.token);
          
          if (userId) {
            this.userManager.setUserId(userId);
          }
          
          return true;
        }
      }
      
      return false;
    } catch (error) {
      throw new LogError(
        `Failed to authenticate with password: ${error instanceof Error ? error.message : String(error)}`,
        'authentication_failed'
      );
    }
  }
  
  /**
   * Authenticate with an API key
   *
   * @param apiKey API key
   * @returns Promise that resolves to true if authentication was successful
   */
  public async authenticateWithApiKey(apiKey: string): Promise<boolean> {
    try {
      // Ensure endpoints are initialized
      await this.initialize();
      
      // Authenticate with API key
      const authenticated = await this.authManager.authenticateWithApiKey(apiKey);
      
      if (authenticated) {
        // Initialize the key hierarchy
        await this.keyHierarchyManager.initializeWithApiKey(this.tenantId, apiKey);
        
        return true;
      }
      
      return false;
    } catch (error) {
      throw new LogError(
        `Failed to authenticate with API key: ${error instanceof Error ? error.message : String(error)}`,
        'authentication_failed'
      );
    }
  }
  
  /**
   * Initialize with a recovery phrase
   *
   * @param recoveryPhrase Recovery phrase
   * @param versions KEK versions to recover (if not provided, only the latest version is recovered)
   * @returns Promise that resolves to true if initialization was successful
   */
  public async initializeWithRecoveryPhrase(
    recoveryPhrase: string,
    versions?: string[]
  ): Promise<boolean> {
    try {
      this.checkAuthentication();
      
      // Initialize the key hierarchy
      await this.keyHierarchyManager.initializeWithRecoveryPhrase(
        this.tenantId,
        recoveryPhrase,
        versions
      );
      
      return true;
    } catch (error) {
      throw new LogError(
        `Failed to initialize with recovery phrase: ${error instanceof Error ? error.message : String(error)}`,
        'initialize_with_recovery_phrase_failed'
      );
    }
  }
  
  /**
   * Initialize with a mnemonic phrase
   *
   * @param mnemonicPhrase BIP-39 mnemonic phrase
   * @param versions KEK versions to recover (if not provided, only the latest version is recovered)
   * @returns Promise that resolves to true if initialization was successful
   */
  public async initializeWithMnemonic(
    mnemonicPhrase: string,
    versions?: string[]
  ): Promise<boolean> {
    try {
      this.checkAuthentication();
      
      // Initialize the key hierarchy
      await this.keyHierarchyManager.initializeWithMnemonic(
        this.tenantId,
        mnemonicPhrase,
        versions
      );
      
      return true;
    } catch (error) {
      throw new LogError(
        `Failed to initialize with mnemonic phrase: ${error instanceof Error ? error.message : String(error)}`,
        'initialize_with_mnemonic_failed'
      );
    }
  }
  
  /**
   * Generate a mnemonic phrase
   *
   * @param strength Optional strength in bits (128 = 12 words, 256 = 24 words)
   * @returns The generated mnemonic phrase
   */
  public generateMnemonic(strength: number = 128): string {
    return this.cryptoService.getMnemonicService().generateMnemonic(strength);
  }
  
  /**
   * Generate quiz questions from a mnemonic phrase
   *
   * @param mnemonic The mnemonic phrase
   * @param numQuestions Number of questions to generate (default: 3)
   * @returns Array of quiz questions with word index and word
   */
  public generateMnemonicQuiz(mnemonic: string, numQuestions: number = 3): Array<{ index: number; word: string }> {
    return this.cryptoService.getMnemonicService().generateQuizQuestions(mnemonic, numQuestions);
  }
  
  /**
   * Verify mnemonic quiz answers
   *
   * @param mnemonic The original mnemonic phrase
   * @param answers Array of answers with index and word
   * @returns True if all answers are correct
   */
  public verifyMnemonicQuiz(
    mnemonic: string,
    answers: Array<{ index: number; word: string }>
  ): boolean {
    return this.cryptoService.getMnemonicService().verifyQuizAnswers(mnemonic, answers);
  }
  
  /**
   * Recover KEK versions
   *
   * @param versions KEK versions to recover
   * @returns Promise that resolves to true if recovery was successful
   */
  public async recoverKEKVersions(versions: string[]): Promise<boolean> {
    try {
      this.checkAuthentication();
      
      // Recover KEK versions
      await this.keyHierarchyManager.recoverKEKVersions(versions);
      
      return true;
    } catch (error) {
      throw new LogError(
        `Failed to recover KEK versions: ${error instanceof Error ? error.message : String(error)}`,
        'recover_kek_versions_failed'
      );
    }
  }
  
  /**
   * Log data to the specified log
   *
   * @param logName Log name
   * @param data Log data
   * @param options Options for logging
   * @returns Promise that resolves to the log ID
   */
  public async log(
    logName: string,
    data: Record<string, any>,
    options: { kekVersion?: string } = {}
  ): Promise<string> {
    this.checkAuthentication();
    
    try {
      // Ensure endpoints are initialized
      await this.initialize();
      
      // Log data
      return await this.logManager.log(
        logName,
        data,
        options,
        this.authManager.getAuthCredential()
      );
    } catch (error) {
      throw new LogError(
        `Failed to log data: ${error instanceof Error ? error.message : String(error)}`,
        'log_failed'
      );
    }
  }
  
  /**
   * Get logs for the specified log name
   *
   * @param logName Log name
   * @param options Options for getting logs
   * @returns Promise that resolves to the logs
   */
  public async getLogs(
    logName: string,
    options: { limit?: number } = {}
  ): Promise<Record<string, any>[]> {
    this.checkAuthentication();
    
    try {
      // Ensure endpoints are initialized
      await this.initialize();
      
      // Get logs
      return await this.logManager.getLogs(
        logName,
        options,
        this.authManager.getAuthCredential()
      );
    } catch (error) {
      throw new LogError(
        `Failed to get logs: ${error instanceof Error ? error.message : String(error)}`,
        'get_logs_failed'
      );
    }
  }
  
  /**
   * Search logs for the specified log name
   *
   * @param logName Log name
   * @param options Options for searching logs
   * @returns Promise that resolves to the search results
   */
  public async searchLogs(
    logName: string,
    options: { query: string; limit?: number }
  ): Promise<Record<string, any>[]> {
    this.checkAuthentication();
    
    try {
      // Ensure endpoints are initialized
      await this.initialize();
      
      // Search logs
      return await this.logManager.searchLogs(
        logName,
        options,
        this.authManager.getAuthCredential()
      );
    } catch (error) {
      throw new LogError(
        `Failed to search logs: ${error instanceof Error ? error.message : String(error)}`,
        'search_logs_failed'
      );
    }
  }
  
  /**
   * Get all logs
   *
   * @param options Options for getting all logs
   * @returns Promise that resolves to the logs
   */
  public async getAllLogs(
    options: { limit?: number } = {}
  ): Promise<Record<string, any>[]> {
    this.checkAuthentication();
    
    try {
      // Ensure endpoints are initialized
      await this.initialize();
      
      // Get all logs
      return await this.logManager.getAllLogs(
        options,
        this.authManager.getAuthCredential()
      );
    } catch (error) {
      throw new LogError(
        `Failed to get all logs: ${error instanceof Error ? error.message : String(error)}`,
        'get_all_logs_failed'
      );
    }
  }
  
  /**
   * Get all users
   *
   * @returns Promise that resolves to the users
   */
  public async getUsers(): Promise<any[]> {
    this.checkAuthentication();
    
    try {
      // Ensure endpoints are initialized
      await this.initialize();
      
      // Get users
      return await this.userManager.getUsers(
        this.authManager.getAuthCredential()
      );
    } catch (error) {
      throw new LogError(
        `Failed to get users: ${error instanceof Error ? error.message : String(error)}`,
        'get_users_failed'
      );
    }
  }
  
  /**
   * Get pending admin promotions
   *
   * @returns Promise that resolves to the pending admin promotions
   */
  public async getPendingAdminPromotions(): Promise<any[]> {
    this.checkAuthentication();
    
    try {
      // Ensure endpoints are initialized
      await this.initialize();
      
      // Get pending admin promotions
      return await this.userManager.getPendingAdminPromotions(
        this.authManager.getAuthCredential()
      );
    } catch (error) {
      throw new LogError(
        `Failed to get pending admin promotions: ${error instanceof Error ? error.message : String(error)}`,
        'get_pending_admin_promotions_failed'
      );
    }
  }
  
  /**
   * Approve an admin promotion
   *
   * @param promotionId Promotion ID
   * @param userPassword User password
   * @returns Promise that resolves when the promotion is approved
   */
  public async approveAdminPromotion(
    promotionId: string,
    userPassword: string
  ): Promise<void> {
    this.checkAuthentication();
    
    try {
      // Ensure endpoints are initialized
      await this.initialize();
      
      // Approve admin promotion
      await this.userManager.approveAdminPromotion(
        promotionId,
        userPassword,
        this.authManager.getAuthCredential()
      );
    } catch (error) {
      throw new LogError(
        `Failed to approve admin promotion: ${error instanceof Error ? error.message : String(error)}`,
        'approve_admin_promotion_failed'
      );
    }
  }
  
  /**
   * Reject an admin promotion
   *
   * @param promotionId Promotion ID
   * @returns Promise that resolves when the promotion is rejected
   */
  public async rejectAdminPromotion(promotionId: string): Promise<void> {
    this.checkAuthentication();
    
    try {
      // Ensure endpoints are initialized
      await this.initialize();
      
      // Reject admin promotion
      await this.userManager.rejectAdminPromotion(
        promotionId,
        this.authManager.getAuthCredential()
      );
    } catch (error) {
      throw new LogError(
        `Failed to reject admin promotion: ${error instanceof Error ? error.message : String(error)}`,
        'reject_admin_promotion_failed'
      );
    }
  }
  
  /**
   * Create an API key
   *
   * @param name API key name
   * @param permissions API key permissions
   * @returns Promise that resolves to the API key
   */
  public async createApiKey(
    name: string,
    permissions: string[]
  ): Promise<string> {
    this.checkAuthentication();
    
    try {
      // Ensure endpoints are initialized
      await this.initialize();
      
      // Create API key
      return await this.authManager.createApiKey(
        name,
        permissions,
        this.authManager.getAuthCredential()
      );
    } catch (error) {
      throw new LogError(
        `Failed to create API key: ${error instanceof Error ? error.message : String(error)}`,
        'create_api_key_failed'
      );
    }
  }
  
  /**
   * Get API keys
   *
   * @returns Promise that resolves to the API keys
   */
  public async getApiKeys(): Promise<any[]> {
    this.checkAuthentication();
    
    try {
      // Ensure endpoints are initialized
      await this.initialize();
      
      // Get API keys
      return await this.authManager.getApiKeys(
        this.authManager.getAuthCredential()
      );
    } catch (error) {
      throw new LogError(
        `Failed to get API keys: ${error instanceof Error ? error.message : String(error)}`,
        'get_api_keys_failed'
      );
    }
  }
  
  /**
   * Revoke an API key
   *
   * @param apiKeyId API key ID
   * @returns Promise that resolves when the API key is revoked
   */
  public async revokeApiKey(apiKeyId: string): Promise<void> {
    this.checkAuthentication();
    
    try {
      // Ensure endpoints are initialized
      await this.initialize();
      
      // Revoke API key
      await this.authManager.revokeApiKey(
        apiKeyId,
        this.authManager.getAuthCredential()
      );
    } catch (error) {
      throw new LogError(
        `Failed to revoke API key: ${error instanceof Error ? error.message : String(error)}`,
        'revoke_api_key_failed'
      );
    }
  }
  
  /**
   * Get KEK versions
   *
   * @returns Promise that resolves to the KEK versions
   */
  public async getKEKVersions(): Promise<any[]> {
    this.checkAuthentication();
    
    try {
      // Ensure endpoints are initialized
      await this.initialize();
      
      // Get KEK versions
      return await this.keyHierarchyManager.getKEKVersions(
        this.authManager.getAuthCredential()
      );
    } catch (error) {
      throw new LogError(
        `Failed to get KEK versions: ${error instanceof Error ? error.message : String(error)}`,
        'get_kek_versions_failed'
      );
    }
  }
  
  /**
   * Create a new KEK version
   *
   * @param reason Reason for creating the new version
   * @returns Promise that resolves to the new KEK version
   */
  public async createKEKVersion(reason: string): Promise<any> {
    this.checkAuthentication();
    
    try {
      // Ensure endpoints are initialized
      await this.initialize();
      
      // Create KEK version
      return await this.keyHierarchyManager.createKEKVersion(
        reason,
        this.authManager.getAuthCredential()
      );
    } catch (error) {
      throw new LogError(
        `Failed to create KEK version: ${error instanceof Error ? error.message : String(error)}`,
        'create_kek_version_failed'
      );
    }
  }
  
  /**
   * Rotate KEK
   *
   * @param reason Reason for rotation
   * @param removedUsers Array of user IDs to remove
   * @returns Promise that resolves to the new KEK version
   */
  public async rotateKEK(reason: string, removedUsers: string[] = []): Promise<any> {
    this.checkAuthentication();
    
    try {
      // Ensure endpoints are initialized
      await this.initialize();
      
      // Rotate KEK
      return await this.keyHierarchyManager.rotateKEK(
        reason,
        removedUsers,
        this.authManager.getAuthCredential()
      );
    } catch (error) {
      throw new LogError(
        `Failed to rotate KEK: ${error instanceof Error ? error.message : String(error)}`,
        'rotate_kek_failed'
      );
    }
  }
  
  /**
   * Get a user key pair
   *
   * @param userPassword User password
   * @returns Promise that resolves to the user key pair
   */
  public async getUserKeyPair(userPassword: string): Promise<CryptoKeyPair> {
    this.checkAuthentication();
    
    try {
      // Get user key pair
      return await this.userManager.getUserKeyPair(userPassword);
    } catch (error) {
      throw new LogError(
        `Failed to get user key pair: ${error instanceof Error ? error.message : String(error)}`,
        'get_user_key_pair_failed'
      );
    }
  }
  
  /**
   * Upload a user's public key
   *
   * @param userPassword User password
   * @returns Promise that resolves when the public key is uploaded
   */
  public async uploadUserPublicKey(userPassword: string): Promise<void> {
    this.checkAuthentication();
    
    try {
      // Ensure endpoints are initialized
      await this.initialize();
      
      // Upload user public key
      await this.userManager.uploadUserPublicKey(
        userPassword,
        this.authManager.getAuthCredential()
      );
    } catch (error) {
      throw new LogError(
        `Failed to upload user public key: ${error instanceof Error ? error.message : String(error)}`,
        'upload_public_key_failed'
      );
    }
  }
  
  /**
   * Get the current user ID
   *
   * @returns The current user ID
   */
  public getCurrentUserId(): string {
    return this.userManager.getCurrentUserId();
  }
  
  /**
   * Get the auth URL
   *
   * @returns The auth URL
   */
  public getAuthUrl(): string {
    return this.authService.getBaseUrl();
  }
  
  /**
   * Get the server URL
   *
   * @returns The server URL
   */
  public getServerUrl(): string {
    return this.logsService.getBaseUrl();
  }
  
  /**
   * Get the web URL
   *
   * @returns The web URL
   */
  public getWebUrl(): string {
    return this.webUrl || '';
  }
  
  /**
   * Get the direct logs service
   *
   * @returns The logs service
   */
  public getDirectLogsService(): LogsService {
    return this.logsService;
  }
  
  /**
   * Check if the client is authenticated
   * 
   * @returns True if the client is authenticated
   */
  public isAuthenticated(): boolean {
    return this.authManager.isAuthenticated();
  }
  
  /**
   * Check if the client is authenticated
   *
   * @throws LogError if not authenticated
   */
  private checkAuthentication(): void {
    if (!this.authManager.isAuthenticated()) {
      throw new LogError('Not authenticated', 'not_authenticated');
    }
  }
}
